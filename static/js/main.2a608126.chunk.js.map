{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","selectedGoods","spans","document","getElementsByTagName","buttons","this","phrase","length","selectedGood","slice","join","className","type","onClick","i","classList","remove","textContent","setState","map","product","e","button","target","buttonText","buttonToggle","action","toggle","prevState","indexOfProduct","indexOf","splice","React","Component","ReactDOM","render","getElementById"],"mappings":"qPAGMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOIC,E,4MACJC,MAAQ,CACNC,cAAe,I,EAGjBC,MAAQC,SAASC,qBAAqB,Q,EAEtCC,QAAUF,SAASC,qBAAqB,U,4CAExC,WAAU,IAAD,OACCH,EAAkBK,KAAKN,MAAvBC,cACJM,EAAS,oBAEb,GAA6B,IAAzBN,EAAcO,OAAc,CAC9B,IAAMC,EAAeR,EAAc,GAEnCM,EAAS,UACFE,EADoB,cAAjBA,GAAiD,SAAjBA,EAAjC,gCASX,OAJIR,EAAcO,OAAS,IACzBD,EAAM,UAAM,YAAIN,GAAeS,MAAM,GAAI,GAAGC,KAAK,MAA3C,4BAA4DV,EAAcS,OAAO,IAAjF,kBAIN,sBAAKE,UAAU,MAAf,UACE,0DACuBL,GACpB,IAC0B,IAAzBN,EAAcO,OACZ,GAEA,wBACEK,KAAK,SACLC,QAAS,WACP,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKb,MAAMM,OAAQO,GAAK,EAC1C,EAAKb,MAAMa,GAAGC,UAAUC,OAAO,YAC/B,EAAKZ,QAAQU,EAAI,GAAGG,YAAc,MAGpC,EAAKC,SAAS,CAAElB,cAAe,MARnC,kBAeN,6BACGH,EAAgBsB,KAAI,SAACC,GACpB,OACE,+BAGE,+BAAOA,IACN,IACD,wBACER,KAAK,SACLC,QAAS,SAACQ,GACR,IAAMC,EAASD,EAAEE,OACXC,EAAcF,EAA6BL,YAE3CQ,EAAe,SAACC,GACnBJ,EAA6BL,YAAcS,EAE5C,IAAK,IAAIZ,EAAI,EAAGA,EAAI,EAAKb,MAAMM,OAAQO,GAAK,EACtC,EAAKb,MAAMa,GAAGG,cAAgBG,GAChC,EAAKnB,MAAMa,GAAGC,UAAUY,OAAO,aAKrC,OAAQH,GACN,IAAK,SACH,EAAKN,UAAS,SAACU,GACb,IAAMC,EAAiBD,EAAU5B,cAAc8B,QAAQV,GAKvD,OAHAQ,EAAU5B,cAAc+B,OAAOF,EAAgB,GAC/CJ,EAAa,OAEN,CAAEzB,cAAe4B,EAAU5B,kBAGpC,MAEF,IAAK,MACH,EAAKkB,UAAS,SAACU,GAGb,OAFAH,EAAa,UAEN,CACLzB,cAAc,GAAD,mBAAM4B,EAAU5B,eAAhB,CAA+BoB,UAlCxD,mBAJKA,e,GApDHY,IAAMC,WAgHTnC,ICjIfoC,IAASC,OACP,cAAC,EAAD,IACAjC,SAASkC,eAAe,W","file":"static/js/main.2a608126.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  selectedGoods: string[];\n};\n\nclass App extends React.Component<{}, State> {\n  state = {\n    selectedGoods: [],\n  };\n\n  spans = document.getElementsByTagName('span');\n\n  buttons = document.getElementsByTagName('button');\n\n  render() {\n    const { selectedGoods } = this.state;\n    let phrase = 'No goods selected';\n\n    if (selectedGoods.length === 1) {\n      const selectedGood = selectedGoods[0];\n\n      phrase = (selectedGood === 'Dumplings' || selectedGood === 'Eggs')\n        ? `${selectedGood} are selected`\n        : `${selectedGood} is selected`;\n    }\n\n    if (selectedGoods.length > 1) {\n      phrase = `${[...selectedGoods].slice(0, -1).join(', ')} and ${[...selectedGoods.slice(-1)]} are selected`;\n    }\n\n    return (\n      <div className=\"app\">\n        <h1>\n          {`Selected good: - ${phrase}`}\n          {' '}\n          {(selectedGoods.length === 0)\n            ? ''\n            : (\n              <button\n                type=\"button\"\n                onClick={() => {\n                  for (let i = 0; i < this.spans.length; i += 1) {\n                    this.spans[i].classList.remove('selected');\n                    this.buttons[i + 1].textContent = 'Add';\n                  }\n\n                  this.setState({ selectedGoods: [] });\n                }}\n              >\n                X\n              </button>\n            )}\n        </h1>\n        <ul>\n          {goodsFromServer.map((product) => {\n            return (\n              <li\n                key={product}\n              >\n                <span>{product}</span>\n                {' '}\n                <button\n                  type=\"button\"\n                  onClick={(e) => {\n                    const button = e.target;\n                    const buttonText = (button as HTMLButtonElement).textContent;\n\n                    const buttonToggle = (action: string): void => {\n                      (button as HTMLButtonElement).textContent = action;\n\n                      for (let i = 0; i < this.spans.length; i += 1) {\n                        if (this.spans[i].textContent === product) {\n                          this.spans[i].classList.toggle('selected');\n                        }\n                      }\n                    };\n\n                    switch (buttonText) {\n                      case 'Remove':\n                        this.setState((prevState) => {\n                          const indexOfProduct = prevState.selectedGoods.indexOf(product);\n\n                          prevState.selectedGoods.splice(indexOfProduct, 1);\n                          buttonToggle('Add');\n\n                          return { selectedGoods: prevState.selectedGoods };\n                        });\n\n                        break;\n\n                      case 'Add':\n                        this.setState((prevState) => {\n                          buttonToggle('Remove');\n\n                          return {\n                            selectedGoods: [...prevState.selectedGoods, product],\n                          };\n                        });\n\n                        break;\n\n                      default:\n                        break;\n                    }\n                  }}\n                >\n                  Add\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}